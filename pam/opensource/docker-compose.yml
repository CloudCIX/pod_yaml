version: '3'

networks:
   mgmt:
      driver: bridge
      enable_ipv6: true
      ipam:
         config:
            - subnet: "${IP6}d0c:0:1/96"
              gateway: "${IP6}d0c:0:1"
   oob:
      driver: macvlan
      driver_opts:
         parent: ${OOB_INTERFACE}
      ipam:
         config:
            - subnet: "10.${pod_id}.0.0/16"
              ip_range: "10.${pod_id}.0.0/24"
              gateway: "10.${pod_id}.0.1"

services:
   pgsqlpam:
      image: cloudcix/pgsqlpam:latest
      container_name: pgsqlpam
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3004:5"
         oob:
            ipv4_address: "10.${pod_id}.0.7"
      environment:
         - POSTGRES_PASSWORD=${PGSQLPAM_PASSWORD}
         - POSTGRES_USER=${PGSQLPAM_USER}
      volumes:
         - /var/lib/pgsqlpam:/var/lib/postgresql/data/

   pgadminpam:
      image: dpage/pgadmin4
      container_name: pgadminpam
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3002:1"
      environment:
         - PGADMIN_DEFAULT_EMAIL=${PGADMINPAM_EMAIL}
         - PGADMIN_DEFAULT_PASSWORD=${PGADMINPAM_PASSWORD}
      depends_on:
         - pgsqlpam

   pam:
      image: cloudcix/pam:latest
      container_name: pam
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3002:4"
         oob:
            ipv4_address: "10.${pod_id}.0.6"
      environment:
         - DEV_USER=${DEV_USER}
         - ICARUS_URL=https://icarus.${POD_NAME}.${ORGANIZATION_URL}
         - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}         
         - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}         
         - ORGANIZATION_URL=${ORGANIZATION_URL}
         - PGSQLPAM_PASSWORD=${PGSQLPAM_PASSWORD}
         - PGSQLPAM_USER=${PGSQLPAM_USER}
         - POD_NAME=${POD_NAME}
         - POD_SECRET_KEY=${POD_SECRET_KEY}
         - ROUTER_MANAGEMENT_IP=${ROUTER_MANAGEMENT_IP}
         - ROUTER_PUBLIC_INTERFACE=${ROUTER_PUBLIC_INTERFACE}
         - VPN_PAM_PUBLIC_ADDRESS=${VPN_PAM_PUBLIC_ADDRESS}
      volumes:
         - pam_static_volume:/app/_static
         - /etc/cloudcix/docker/pod_ssh:/pod_ssh
         - /etc/cloudcix/docker/ssl_certs:/ssl_certs
         - /home/administrator/.ssh/id_rsa_0:/root/.ssh/id_rsa
         - /home/administrator/.ssh/id_rsa_0.pub:/root/.ssh/id_rsa.pub
      depends_on:
         - pgsqlpam
      restart: on-failure

   radius:
      image: asdaru/freeradius-mysql-daloradius:latest
      container_name: radius
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3004:6"
         oob:
            ipv4_address: "10.${pod_id}.0.3"
      environment:
         - CLIENT_SECRET=${RADIUS_SECRET_KEY}
         - CLIENT_NET=10.0.0.0/8
         - RADIUS_DB_PWD=${MYSQLRADIUS_PASSWORD}
         - RADIUS_DB_ROOT_PWD=${MYSQLRADIUS_ROOT_PASSWORD}
         - RADIUS_DB_SERVER=mysqlradius
         - RADIUS_DB_USER=${MYSQLRADIUS_USER}
      volumes:
         - "radius-data:/etc/freeradius"
      restart: always

   mysql-workbench:
      image: ghcr.io/linuxserver/mysql-workbench
      container_name: mysql-workbench
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3002:2"
         oob:
            ipv4_address: "10.${pod_id}.0.8"
      environment:
         - PGID=1000
         - PUID=1000
         - TZ=Europe/Dublin
      cap_add:
         - IPC_LOCK
      restart: unless-stopped

   jumphost:
      image: cloudcix/jumphost:latest
      container_name: jumphost
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3002:3"
         oob:
            ipv4_address: "10.${pod_id}.0.5"
      environment:
         - HTTP_PASSWORD=${JUMPHOST_HTTP_PASSWORD}
         - PASSWORD=${JUMPHOST_PASSWORD}
         - RESOLUTION=1280x720
         - USER=${JUMPHOST_USERNAME}
         - VNC_PASSWORD=${JUMPHOST_VNC_PASSWORD}
      restart: always

   # Icarus
   daedalus:
      image: cloudcix/daedalus:latest
      container_name: daedalus
      depends_on:
         - pgsqlpam
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3002:7"
      environment:
         - POSTGRES_PASSWORD=${PGSQLPAM_PASSWORD}
         - POSTGRES_USER=${PGSQLPAM_USER}
         - POD_SECRET_KEY=${POD_SECRET_KEY}
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost/regions/"]
         interval: 10s
         timeout: 5s
         retries: 5

   majora:
      image: cloudcix/majora:latest
      container_name: majora
      networks:
         mgmt:
      depends_on:
         - daedalus
         - nginxpam

   icarus:
      image: cloudcix/icarus:latest
      container_name: icarus
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3002:6"
      depends_on:
         - daedalus
   # MinIO
   # starts 4 docker containers running minio server instances.
   # using nginx reverse proxy, load balancing, you can access it through port 9000.
   minio1:
      image: minio/minio:RELEASE.2021-06-17T00-10-46Z
      container_name: minio1
      networks:
         mgmt:
      environment:
        -  MINIO_ROOT_USER=${MINIO_ROOT_USER}
         - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      expose:
         - "9000"
      volumes:
         - minio1-data-1:/data1
         - minio1-data-2:/data2
      command: server http://minio{1...4}/data{1...2}
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3

   minio2:
      image: minio/minio:RELEASE.2021-06-17T00-10-46Z
      container_name: minio2
      networks:
         mgmt:
      environment:
        -  MINIO_ROOT_USER=${MINIO_ROOT_USER}
         - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      expose:
         - "9000"
      volumes:
         - minio2-data-1:/data1
         - minio2-data-2:/data2
      command: server http://minio{1...4}/data{1...2}
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3

   minio3:
      image: minio/minio:RELEASE.2021-06-17T00-10-46Z
      container_name: minio3
      networks:
         mgmt:
      environment:
        -  MINIO_ROOT_USER=${MINIO_ROOT_USER}
         - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      expose:
         - "9000"
      volumes:
         - minio3-data-1:/data1
         - minio3-data-2:/data2
      command: server http://minio{1...4}/data{1...2}
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3

   minio4:
      image: minio/minio:RELEASE.2021-06-17T00-10-46Z
      container_name: minio4
      networks:
         mgmt:
      environment:
        -  MINIO_ROOT_USER=${MINIO_ROOT_USER}
         - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      expose:
         - "9000"
      volumes:
         - minio4-data-1:/data1
         - minio4-data-2:/data2
      command: server http://minio{1...4}/data{1...2}
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3

   # NGINX
   nginxpam:
      image: nginx:1.19.2-alpine
      container_name: nginxpam
      networks:
         mgmt:
            ipv6_address: "${IP6}d0c:3004:a"
      environment:
         - POD_NAME=${POD_NAME}
         - ORGANIZATION_URL=${ORGANIZATION_URL}
      volumes:
         - ./templates/pam:/etc/nginx/templates
         - /etc/nginx/certs:/etc/nginx/certs
         - pam_static_volume:/app/_static
      depends_on:
         - daedalus
         - icarus
         - minio1
         - minio2
         - minio3
         - minio4
         - pam

volumes:
   # pam volumes
   minio1-data-1:
   minio1-data-2:
   minio2-data-1:
   minio2-data-2:
   minio3-data-1:
   minio3-data-2:
   minio4-data-1:
   minio4-data-2:
   pam_static_volume:
   radius-data:
      